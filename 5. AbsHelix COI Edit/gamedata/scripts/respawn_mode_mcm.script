--All Chance variables to be declared here, for easier editing
local insureChance = 45 -- %Chance for items to be recovered (per item)
local stillCostChance = 25 -- %Chance for items to still cost cash, even if it was not recovered
local fullHealChance = 10 -- %Chance for player to receive full health after death
local respawn_in_bed_chance = 80 ---- %Chance for player to respawn in last slept bed
local fullSatietyChance = 25 -- %Chance for player to not have any hunger after death
local mealChance = 0.35 -- %Chance for meals, calculation still in very early stages, max value is 1!!
local minimumInsuranceCash = 5000
local enable_Insurance = true --If true will recover items depending on Insurance Chance value. Disabled would be the same as setting "Insurance Chance" and "Still Cost Chance" to 0
local enable_TimeSkip = true -- If true the time will move forwards between 6 and 72 hours to "simulate" player being knocked out, and taken back to home base or last slept location. If disabled would strongly recommend setting "Full Heal Chance" and "Full Satiety Chance" to 100.
local enable_InsuranceCost = true -- Should recovered items cost money, or should it all be free. If true each recovered item will cost random RU between "Minimum Insurance Item Cost" and "Maximum Insurance Item Cost". If player does not have enough money for the item to be recovered, then the item will not be recovered.
local enable_LosingItems = true -- If false, then upon death player will not lose any items. Invalidates all insurance settings if disabled.
local enable_LosingMoney = true
local player_just_died = false -- DO NOT EDIT THIS, ALWAYS HAS TO BE FALSE FOR CODE TO WORK CORRECTLY
local min_InsuranceCost = 5 -- How much RU will be taken on death per recovered item at minimum. WARNING: Do not set this value above "max_InsuranceCost"
local max_InsuranceCost = 200 -- How much RU will be taken on death per recovered item at maximum. WARNING: Do not set this value below "min_InsuranceCost"
--Test functions to give out items to nearest Stalkers.
local test_stealItems = true -- If true, with Lose items upon death, any items not recovered by insurance will be instead taken by other Stalkers, who were closest to your death location. WARNING: currently any item stolen by other stalkers will have the Condition of an item reset, meaning that most likely the item will be very low condition.
local test_thiefSnitch = false -- If true, will receive PDA messages with names of Stalkers who stole items from you, while you were out of action. They might still have your items, or could have already lost them. "Actual Item Theft" has to be enabled for this to work.
local available_Stealers = {}
local snitchThieves = {}
local keepEquipped = false -- If true, will not lose any equipped items. Only items that are in your inventory/not equipped will be lost. Basically someone just wanted to loot through your backpack and leave everything you had equipped, more friendly zone.
secureContainer_maxWeight = 10 -- How much KG the secure container can handle.
-- Hardcore settings and options
local hardcoreHealth = false -- if true, then on each death max available health for character will drop.
local hardcoreStamina = false -- if true, then on each death max available stamina for character will drop.
local hardcoreHealthDrop = 0.05 -- Value of max Health that will be dropped per death
local hardcoreStaminaDrop = 0.05 -- Value of max Stamina that will be dropped per death
local hardcoreHealthMin = 0.2 -- Minimum value of Max Health after deaths that the player can have (will not go lower than this, the lowest max health possible after respawns)
local hardcoreStaminaMin = 0.25 -- Minimum value of Max Stamina after deaths that the player can have (will not go lower than this, the lowest max stamina possible after respawns)
local hardcorePermanentDeath = false -- If enabled then once max Health drops to hardcoreHealthMin value, then the next respawn will not be possible, permanent death will occur.
local hardcoreRegainHealth = false -- If enabled it will be possible to regain lost max health, by not dying, being full health (well to the max health available) and not hungry, then going to sleep which will recover some max health.
local hardcoreRegainStamina = false -- If enabled it will be possible to regain lost max health, by not dying, being full health (well to the max health available) and not hungry, then going to sleep which will recover some max health.
local hardcoreChangeAnouncements = false -- if enabled will let player know of Health and Stamina changes with PDA messages.
--Hardcore per save options, this will be part of gameplay, not settings, do not change any of these
local hardcore_CurrMaxHealth = 1
local hardcore_CurrMaxStamina = 1
local hardcore_RegainHealthAmount = 0
local hardcore_RegainStaminaAmount = 0

function on_game_start()
	RegisterScriptCallback("actor_on_before_death", actor_on_before_death)
	--RegisterScriptCallback("actor_on_update", actor_on_update)
	RegisterScriptCallback("on_option_change", loadsettings)  --MCM sends the same callback as ui_options 
	RegisterScriptCallback("on_game_load", loadGameVals)
	loadsettings()
	loadGameVals()
end

--MCM Support Code
function loadsettings()
	if ui_mcm then -- here we test to make sure ui_mcm exists before trying to call it's get function.
		enable_Insurance = ui_mcm.get("curseofimmortality/enableinsurance")
		enable_InsuranceCost = ui_mcm.get("curseofimmortality/enableinsurancecost")
		enable_LosingItems = ui_mcm.get("curseofimmortality/enablelosingitems")
		enable_LosingMoney = ui_mcm.get("curseofimmortality/enablelosingmoney")
		insureChance = tonumber(ui_mcm.get("curseofimmortality/insurechance"))
		stillCostChance = tonumber(ui_mcm.get("curseofimmortality/stillcostchance"))
		fullHealChance = tonumber(ui_mcm.get("curseofimmortality/fullhealchance"))
		respawn_in_bed_chance = tonumber(ui_mcm.get("curseofimmortality/respawninbedchance"))
		fullSatietyChance = tonumber(ui_mcm.get("curseofimmortality/fullsatietychance"))
		mealChance = tonumber(ui_mcm.get("curseofimmortality/mealchance"))
		minimumInsuranceCash = tonumber(ui_mcm.get("curseofimmortality/minimuminsurancecash"))
		min_InsuranceCost = tonumber(ui_mcm.get("curseofimmortality/minimuminsurancecost"))
		max_InsuranceCost = tonumber(ui_mcm.get("curseofimmortality/maximuminsurancecost"))
		enable_TimeSkip = ui_mcm.get("curseofimmortality/enabletimeskip")
		test_stealItems = ui_mcm.get("curseofimmortality/itemtheft")
		test_thiefSnitch = ui_mcm.get("curseofimmortality/thiefsnitch")
		keepEquipped = ui_mcm.get("curseofimmortality/keepequipped")
		secureContainer_maxWeight = tonumber(ui_mcm.get("curseofimmortality/securecontainermaxweight"))
		hardcoreHealth = ui_mcm.get("curseofimmortality/hardcorehealth")
		hardcoreHealthDrop = tonumber(ui_mcm.get("curseofimmortality/hardcorehealthdrop"))
		hardcoreHealthMin = tonumber(ui_mcm.get("curseofimmortality/hardcorehealthmin"))
		hardcoreRegainHealth = ui_mcm.get("curseofimmortality/hardcoreregainhealth")
		hardcoreStamina = ui_mcm.get("curseofimmortality/hardcorestamina")
		hardcoreStaminaDrop = tonumber(ui_mcm.get("curseofimmortality/hardcorestaminadrop"))
		hardcoreStaminaMin = tonumber(ui_mcm.get("curseofimmortality/hardcorestaminamin"))
		hardcoreRegainStamina = ui_mcm.get("curseofimmortality/hardcoreregainstamina")
		hardcoreChangeAnouncements = ui_mcm.get("curseofimmortality/hardcorechangeanouncements")
	end
	
end

function loadGameVals()
--Load additional values for respawn mode from savegame, if it exists.
	local respawn_mode = alife_storage_manager.get_state().respawn_mod_gepardas
	if respawn_mode then
		hardcore_CurrMaxHealth = respawn_mode.hardcore_currmaxhealth or 1
		hardcore_CurrMaxStamina = respawn_mode.hardcore_currmaxstamina or 1
		hardcore_RegainHealthAmount = respawn_mode.hardcore_regainhealthamount or 0
		hardcore_RegainStaminaAmount = respawn_mode.hardcore_regainstaminaamount or 0
	end
end
function on_mcm_load()
	op = { id= "curseofimmortality"      	 	,sh=true ,gr={
				{ id= "curseofimmortality_t"				 ,type= "slide"	  ,link= "ui_options_slider_disguise"	 ,text= "ui_mcm_title_curseofimmortality"		,size= {512,50}		,spacing= 20 },
				{id = "enablelosingitems", type = "check", val = 1, def = true},
				{id = "enablelosingmoney", type = "check", val = 1, def = true},
				{id = "keepequipped", type = "check", val = 1, def = false},
				{id = "enableinsurance", type = "check", val = 1, def = true},
				{id = "insurechance", type = "track" , val = 2, min = 0, max = 100, step = 1, def = 45},
				{id = "stillcostchance", type = "track" , val = 2, min = 0, max = 100, step = 1, def = 25},
				{id = "enableinsurancecost", type = "check", val = 1, def = true},	
				{id = "minimuminsurancecash", type = "track" , val = 2, min = 0, max = 25000, step = 500, def = 5000},
				{id = "minimuminsurancecost", type = "track" , val = 2, min = 0, max = 5000, step = 5, def = 5},
				{id = "maximuminsurancecost", type = "track" , val = 2, min = 0, max = 5000, step = 5, def = 200},
				{id = "fullhealchance", type = "track" , val = 2, min = 0, max = 100, step = 1, def = 10},
				{id = "respawninbedchance", type = "track" , val = 2, min = 0, max = 100, step = 1, def = 80},
				{id = "fullsatietychance", type = "track" , val = 2, min = 0, max = 100, step = 1, def = 25},
				{id = "mealchance", type = "track" , val = 2, min = 0, max = 1, step = 0.05, def = 0.35},
				{id = "enabletimeskip", type = "check", val = 1, def = true},	
				{id = "itemtheft", type = "check", val = 1, def = true},
				{id = "thiefsnitch", type = "check", val = 1, def = false},
				{id = "securecontainermaxweight", type = "track" , val = 2, min = 0, max = 20, step = 0.5, def = 4.0},
				{id = "hardcorehealth", type = "check", val = 1, def = false},
				{id = "hardcorehealthdrop", type = "track" , val = 2, min = 0.05, max = 0.25, step = 0.05, def = 0.10},
				{id = "hardcorehealthmin", type = "track" , val = 2, min = 0.15, max = 0.80, step = 0.05, def = 0.30},
				{id = "hardcoreregainhealth", type = "check", val = 1, def = false},
				{id = "hardcorestamina", type = "check", val = 1, def = false},
				{id = "hardcorestaminadrop", type = "track" , val = 2, min = 0.05, max = 0.25, step = 0.05, def = 0.10},
				{id = "hardcorestaminamin", type = "track" , val = 2, min = 0.20, max = 0.80, step = 0.05, def = 0.30},
				{id = "hardcoreregainstamina", type = "check", val = 1, def = false},
				{id = "hardcorechangeanouncements", type = "check", val = 1, def = false},
			}
		}
		
	return op
end

-------------------------

--testing logic for saving co-ordinates for player bed
-- id - respawnMod, name same as varname, val - the actual value to be saved
function on_game_load()
	UnregisterScriptCallback("actor_on_before_death", actor_on_before_death)
	RegisterScriptCallback("actor_on_before_death", actor_on_before_death)
	--UnregisterScriptCallback("on_level_changing", on_level_changing)
	--RegisterScriptCallback("on_level_changing", on_level_changing)
	--RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	if not Respawn_text then
		CreateTimeEvent("send_respawn_mod_information", "send_respawn_mod_information", 2, send_respawn_mod_information)
	end
end

function send_respawn_mod_information()
	db.actor:give_game_news("Respawn Mod", Respawn_text,"ui_inGame2_neutral_2_mask", 0, 20000)
	Respawn_text = nil
end
--currently_respawning = false

function actor_on_before_death(whoID,flags)
	--dxr_statistics.increment_statistic("deaths")
	-- clear inventory --
	bind_stalker_ext.invulnerable_time = time_global() + 68000
	bind_stalker_ext.respawn_invulnerable_time = time_global() + 68500
	--Possible fix for Arena death.
	local box = get_story_object("bar_arena_inventory_box")
	if (box) then
		local function transfer_object_item(box,item)
			box:transfer_item(item, db.actor)
		end
		box:iterate_inventory_box(transfer_object_item,box)
		-- purge all marked items
		xr_zones.purge_arena_items("bar_arena")

		level.add_pp_effector ("blink.ppe", 234, false)

	end
	-------------------
	local sim = alife()
	
	---------------------
	if not currently_respawning then
		currently_respawning = 1
		-- death animation --
		level.disable_input()
		get_console():execute("hud_draw off")
		_G.mus_vol = get_console():get_float("snd_volume_music")
		_G.amb_vol = get_console():get_float("snd_volume_eff")
		--get_console():execute("snd_volume_eff 0")
		--get_console():execute("snd_volume_music 0")
		
		level.add_cam_effector("camera_effects\\surge_02.anm", 444, false, "respawn_mode_mcm.on_tutor_gameover_respawn")
		level.add_pp_effector("actor_death.ppe",445,false)
		level.add_pp_effector("rcom_actor_death_quick.ppe",446,false)
		
		local function draw_hud()
			level.enable_input()
			get_console():execute("hud_draw on")
			return true
		end
		CreateTimeEvent("respawn_mode_draw_hud", "draw_hud", 2, draw_hud)
		--------------------
	end
	--- Forward Time ---
	local forwardTimeMinHours = 6
	local forwardTimeMaxHours = 72
	local p = {}
	p[1] = math.random(forwardTimeMinHours, forwardTimeMaxHours)
	p[2] = math.random(0,59)

	if currently_respawning == 1 then
		currently_respawning = 2
		if enable_TimeSkip then
			xr_effects.forward_game_time(nil,nil,p)
			Respawn_text = tostring("You have been out of action for " .. p[1] .. " Hours and ".. p[2] .. " Minutes")
			--CreateTimeEvent("delayedMessage", "delayedMessage", 1, delayedMessage, news_text)
			CreateTimeEvent("send_respawn_mod_information", "send_respawn_mod_information", 2, send_respawn_mod_information)
		end
	end
	--------------------
	--if currently_respawning < 3 then
	
	--- reset health ---	
	
	local healing = 0.25
	local mealVal = 0.1
	local satiety = 1
	local satiety_minus_per_hour = 0.02
	local power = math.random(0.3, 1.0)
	--Restored Health Calculation
	if math.random(1,100) <= fullHealChance then
		healing = 1
	else
		-- Heal player depending on how much time was spent being down/knocked out
		healing = healing + (0.007 * p[1]) + (0.00011 * p[2])
	end
	if healing > 1 then
		healing = 1
	end
	-----------------------
	-- Satiety calculation--
	if math.random(1,100) <= fullSatietyChance then
		satiety = 1
	else
		-- Logic: actor can get a meal every 6 hours 
		if satiety_minus_per_hour * p[1] >= satiety then
			satiety = 0.2
		else
			satiety = satiety - (satiety_minus_per_hour * p[1])
		end
		local additionalFood = math.random(0.001,0.080)
		local totalFood = p[1] / 6 
		local foodWithChance = totalFood * mealChance
		satiety = satiety + (foodWithChance * mealVal) + additionalFood
		if satiety > 1 then
			satiety = 1
		elseif satiety < 0.2 then
			satiety = 0.2
		end
	end
	--
	bind_stalker_ext.invulnerable_time = time_global() + 8000
	bind_stalker_ext.respawn_invulnerable_time = time_global() + 8500
	if currently_respawning < 3 then
		bind_stalker_ext.respawn_new_health = healing
		global_healing = healing
		global_satiety = satiety
		currently_respawning = 3
		local text = "The Zone has taken you out of action."
		db.actor:give_game_news("Respawn Mod", text,"ui_inGame2_neutral_2_mask", 0, 20000)
		--db.actor:give_game_news("Respawn Mod: Satiety", tostring(global_satiety),"ui_inGame2_neutral_2_mask", 0, 20000)
		
		--Respawn in Bed decision
		local respawn_mod_gepardas = alife_storage_manager.get_state().respawn_mod_gepardas
		if math.random(1,100) > respawn_in_bed_chance or not respawn_mod_gepardas then
			if respawn_mod_gepardas then
				respawn_mod_gepardas.sleep_player_vector_x = nil
				respawn_mod_gepardas.sleep_player_vector_y = nil
				respawn_mod_gepardas.sleep_player_vector_z = nil
			end
			db.actor:give_game_news("Respawn Mod", "Your body has been returned to default starting location.","ui_inGame2_neutral_2_mask", 0, 20000)
		elseif respawn_mod_gepardas and respawn_mod_gepardas.sleep_player_vector_x then
			db.actor:give_game_news("Respawn Mod", "Your body has been returned to your last sleep location.","ui_inGame2_neutral_2_mask", 0, 20000)
		end
		------------------
		-- Do the health checks
		local respawn_mode = alife_storage_manager.get_state().respawn_mod_gepardas or {}
		if hardcoreHealth == true then
			
			if hardcore_CurrMaxHealth - hardcoreHealthDrop > hardcoreHealthMin then
				hardcore_CurrMaxHealth = hardcore_CurrMaxHealth - hardcoreHealthDrop
			else
				hardcore_CurrMaxHealth = hardcoreHealthMin
			end
			if hardcoreChangeAnouncements == true then
				local message = tostring("Your current new Max Health Value is " .. (hardcore_CurrMaxHealth * 100))
				db.actor:give_game_news("Respawn Mod", message,"ui_inGame2_neutral_2_mask", 0, 20000)
			end
			hardcore_RegainHealthAmount = 0
			respawn_mode.hardcore_regainhealthamount = hardcore_RegainHealthAmount
			respawn_mode.hardcore_currmaxhealth = hardcore_CurrMaxHealth
		end
		if hardcoreStamina == true then
			
			if hardcore_CurrMaxStamina - hardcoreStaminaDrop > hardcoreStaminaMin then
				hardcore_CurrMaxStamina = hardcore_CurrMaxStamina - hardcoreStaminaDrop
			else
				hardcore_CurrMaxStamina = hardcoreStaminaMin
			end
			if hardcoreChangeAnouncements == true then
				local message = tostring("Your current new Max Stamina Value is " .. (hardcore_CurrMaxStamina * 100))
				db.actor:give_game_news("Respawn Mod", message,"ui_inGame2_neutral_2_mask", 0, 20000)
			end
			hardcore_RegainStaminaAmount = 0
			respawn_mode.hardcore_regainstaminaamount = hardcore_RegainStaminaAmount
			respawn_mode.hardcore_currmaxstamina = hardcore_CurrMaxStamina
			
		end
		alife_storage_manager.get_state().respawn_mod_gepardas = respawn_mode
	end
	
	--db.actor:set_health_ex(1)
	db.actor.health = global_healing
	db.actor.bleeding = 1
	db.actor.psy_health = 1
	db.actor.radiation = 0
	db.actor.satiety = global_satiety
	db.actor.power = power
	--Possible solution for Black Screen after PSY or Emission death
	arszi_psy.set_psy_health(1)
	--------------------
	--> xr_effects.on_tutor_gameover_respawn()
	--Lastly do the inventory, as it is the most probably to cause issues and fail to respawn.
	if  currently_respawning == 3 then
		currently_respawning = 4
		local total_insurance_paid = 0
		local ignore_list = {
			["cash"] = true,
			["device_pda_1"] = true,
			["device_pda_2"] = true,
			["device_pda_3"] = true,
			["wpn_knife"] = true,
			["wpn_knife2"] = true,
			["wpn_knife3"] = true,
			["wpn_knife4"] = true,
			["wpn_knife5"] = true,
			-- important quest items:
			["army_isg_pendrive"] = true,
			["attackers_pda"] = true,
			["bad_psy_helmet"] = true,
			["blackbox_mlr"] = true,
			["chernobog_notes"] = true,
			["cit_doctors_key"] = true,
			["cit_doctors_pda"] = true,
			["contact_lost_pda"] = true,
			["decoder"] = true,
			["decryption_radio"] = true,
			["drekavac_notes"] = true,
			["drx_agr_u_documents"] = true,
			["drx_jup_u_documents"] = true,
			["drx_sl_quest_item_1"] = true,
			["drx_sl_quest_item_2"] = true,
			["drx_sl_quest_item_3"] = true,
			["drx_x16_documents"] = true,
			["drx_x18_documents"] = true,
			["drx_x19_documents"] = true,
			["drx_x8_documents"] = true,
			["good_psy_helmet"] = true,
			["hb_isg_dushman_intel"] = true,
			["item_pda_map_mlr"] = true,
			["jup_b32_scanner_device"] = true,
			["lx8_history_2_documents"] = true,
			["lx8_history_3_documents"] = true,
			["lx8_history_documents"] = true,
			["main_story_1_quest_case"] = true,
			["main_story_2_lab_x18_documents"] = true,
			["main_story_3_lab_x16_documents"] = true,
			["main_story_4_lab_x10_documents"] = true,
			["main_story_5_lab_x8_documents"] = true,
			["main_story_6_jup_ug_documents"] = true,
			["main_story_7_mon_con_documents"] = true,
			["mlr_strelok_item_01"] = true,
			["pri_decoder_documents"] = true,
			["radio_connections_pda"] = true,
			["recover_mutant_data_device"] = true,
			["x8_documents"] = true,
			["special_delivery_case"] = true,
			["strelok_pendrive"] = true,
			["zat_b40_sarge_pda"] = true,
			["artefact_container"] = true
		}
		--local sim = alife()
		local function release_actor_item(temp, item)
			if not (ignore_list[item:section()]) then
				if ( keepEquipped == false or (keepEquipped == true and db.actor:is_on_belt(item) == false and is_in_slot(item) == false)) then
					local PCmoney = db.actor:money()
					local se_item = sim:object(item:id())
					local insured = false
					local price = 0
					--By using insureChance, each item has a certain chance to be recovered after death 
					-- Insurance recovery per item varies between 5 and 200 in cash
					-- stillCostChance is the chance that player will still be charged even if item was not recovered.
					--]]
					if enable_Insurance then
						if (enable_InsuranceCost == false) and (math.random(1,100) <= insureChance) then
							insured = true
						elseif PCmoney > minimumInsuranceCash then
							price = math.random(min_InsuranceCost, max_InsuranceCost)
							if math.random(1,100) <= insureChance then
								if(PCmoney >= price) then
									db.actor:give_money( -(price) )
									total_insurance_paid = total_insurance_paid + price
									insured = true
								end
							else
								if math.random(1,100) <= stillCostChance then
									if(PCmoney >= price) then
										db.actor:give_money( -(price) )
										total_insurance_paid = total_insurance_paid + price
									end
								end
							end
						end
					end
					if (se_item and insured == false) then
						if test_stealItems == true then
							test_Steal(sim,item)
						else
							sim:release(se_item,true)
						end
					end
				end
			end
		end
		if test_stealItems == true then
			set_Available_Stalkers()
		end
		if enable_LosingItems then
			db.actor:iterate_inventory(release_actor_item,nil)
		end
		if enable_LosingMoney then
			local PCmoney = db.actor:money()
			db.actor:give_money( -(PCmoney)) 
		end
		
		local lostString = tostring("You have lost: " .. total_insurance_paid .. "RU")
		if total_insurance_paid == 0 then
			lostString = tostring("You did not lose any RU this time.")
		end
		db.actor:give_game_news("Respawn Mod", lostString,"ui_inGame2_neutral_2_mask", 0, 20000)
		
		--delayed_GiveStolen(sim)
	end
	flags.ret_value = false	
end

function test_Steal(sim,item)
	if (#available_Stealers == 0) then
		return
	end
	local se_obj
	if math.random(1,100) >= 45 then
		local selectedCommanderID = available_Stealers[1][1]
		se_obj = alife_object(selectedCommanderID)
	else
		local choice = math.random(#available_Stealers)
		if #available_Stealers > 10 then
			choice = math.random(1,10)
		end
		se_obj = alife_object(available_Stealers[choice][1])
	end
	--Debug
	if test_thiefSnitch == true then
		snitchThieves = snitchOnThieves(snitchThieves, se_obj:character_name())
	end
	local specialID = se_obj.id
	--if level.map_has_object_spot(specialID, "primary_object") == 0 then
	--	level.map_add_object_spot_ser(specialID, "primary_object", "Potential Thief")
	--end
	--thieves = testIfValExistsAlready(thieves, tostring(se_obj:character_name())
	--db.actor:transfer_item(sim:object(item:id()),se_obj)
	local cond = item:condition()
	if cond then
		local item = alife_create_item(item:section(), se_obj, { cond = cond })
		item.condition = cond
	else
		alife_create_item(item:section(), se_obj)
	end
	sim:release(sim:object(item:id()),true)
	--delayedRemoveItems[#delayedRemoveItems + 1] = item
	--delayedThieves[#delayedThieves + 1] = se_obj
end

function set_Available_Stalkers()
	local sim = alife()
	local avail_entities = {}
	local sfind = string.find
	for i=1,65534 do 
		local se_obj = sim:object(i)

		if (se_obj and IsStalker(nil, se_obj:clsid()) and se_obj:alive() and se_obj:community() ~= "trader" and se_obj.group_id ~= 65535 and (get_object_story_id(se_obj.group_id) == nil) and sfind(se_obj:name(),"sim_default_")) then
			local dist = warfare.distance_to_xz_sqr(global_position.from(alife():actor()), global_position.from(se_obj))
			avail_entities[#avail_entities + 1] = { i, dist }
		end
		if #avail_entities > 10 then
			i = 65534
		end
	end
	table.sort(avail_entities, function(a, b)
		return a[2] < b[2]
	end)
	available_Stealers = avail_entities
end

function snitchOnThieves(array, val)
	local exists = false
	for i=1,#array do
		if array[i] == val then
			exists = true
			i = #array
		end
	end
	if exists == false then
		array[#array + 1] = val
		--se_obj:character_name()
		local message = tostring("Rumours say " .. val .. " has taken something that belong to you while you were out of action.")
		db.actor:give_game_news("Respawn Mod", message,"ui_inGame2_neutral_2_mask", 0, 20000)
	end
	return array
end

function is_in_slot(obj)
	for k,_ in pairs(SCANNED_SLOTS) do
		local item = db.actor:item_in_slot(k)
		if (item and item:id() == obj:id()) then 
			return true
		end
	end
	return false
end	

local regainHealthTimer = time_global() + 25000
local regainStaminaTimer = time_global() + 25000
-- Possible fix for out of stamina, can't run
local waitStaminaRun = false
function actor_on_update(binder,delta)
	-- Early tests for max health etc.
	-- Check first if max health is enabled
	--db.actor.health = 0.2
	if hardcoreHealth == true then
		if hardcore_CurrMaxHealth < hardcoreHealthMin then
			hardcore_CurrMaxHealth = hardcoreHealthMin
		end
		--Check if current health is not above max hardcore health if it is set it back to max.
		if db.actor.health > hardcore_CurrMaxHealth then
			db.actor.health = hardcore_CurrMaxHealth
		end
	end
	--Do the same with stamina/power.
	if hardcoreStamina == true then
		if hardcore_CurrMaxStamina < hardcoreStaminaMin then
			hardcore_CurrMaxStamina = hardcoreStaminaMin
		end
		if db.actor.power > hardcore_CurrMaxStamina and waitStaminaRun == false then
			db.actor.power = hardcore_CurrMaxStamina
		end
		if db.actor.power < 0.18 then
			waitStaminaRun = true
		end
		if waitStaminaRun and db.actor.power >= 0.30 then
			waitStaminaRun = false
		end
	end
	--Work On regenerating Health Stamina
	if hardcoreRegainHealth == true then
		if regainHealthTimer < time_global() + 1000 and hardcore_RegainHealthAmount < 1 then
			regainHealthTimer = time_global() + 20000
			if db.actor.health + 0.05 >= hardcore_CurrMaxHealth and db.actor.satiety > 0.7 then
				local respawn_mode = alife_storage_manager.get_state().respawn_mod_gepardas or {}
				hardcore_RegainHealthAmount = hardcore_RegainHealthAmount + 0.0005
				respawn_mode.hardcore_regainhealthamount = hardcore_RegainHealthAmount
				alife_storage_manager.get_state().respawn_mod_gepardas = respawn_mode
			end
		end
	end

	if hardcoreRegainStamina == true then
		if regainStaminaTimer < time_global() + 1000 and hardcore_RegainStaminaAmount < 1 then
			regainStaminaTimer = time_global() + 20000
			if db.actor.health + 0.05 >= hardcore_CurrMaxHealth and db.actor.satiety > 0.7 then
				local respawn_mode = alife_storage_manager.get_state().respawn_mod_gepardas or {}
				hardcore_RegainStaminaAmount = hardcore_RegainStaminaAmount + 0.0005
				respawn_mode.hardcore_regainstaminaamount = hardcore_RegainStaminaAmount
				alife_storage_manager.get_state().respawn_mod_gepardas = respawn_mode
			end
		end
	end

	--SendScriptCallback("actor_on_update",binder,delta)
end

function updateHealthStamina()
	local respawn_mode = alife_storage_manager.get_state().respawn_mod_gepardas or {}
	if hardcoreRegainHealth == true then
		if hardcore_CurrMaxHealth + hardcore_RegainHealthAmount > 1 then
			hardcore_CurrMaxHealth = 1
		else
			hardcore_CurrMaxHealth = hardcore_CurrMaxHealth + hardcore_RegainHealthAmount
		end
		hardcore_RegainHealthAmount = 0
		respawn_mode.hardcore_regainhealthamount = hardcore_RegainHealthAmount
		respawn_mode.hardcore_currmaxhealth = hardcore_CurrMaxHealth
		if hardcoreChangeAnouncements == true then
			local message = tostring("Your current new Max Health Value is " .. (hardcore_CurrMaxHealth * 100))
			db.actor:give_game_news("Respawn Mod", message,"ui_inGame2_neutral_2_mask", 0, 20000)
		end
	end
	if hardcoreRegainStamina == true then
		if hardcore_CurrMaxStamina + hardcore_RegainStaminaAmount > 1 then
			hardcore_CurrMaxStamina = 1
		else
			hardcore_CurrMaxStamina = hardcore_CurrMaxStamina + hardcore_RegainStaminaAmount
		end
		hardcore_RegainStaminaAmount = 0
		respawn_mode.hardcore_regainstaminaamount = hardcore_RegainStaminaAmount
		respawn_mode.hardcore_currmaxstamina = hardcore_CurrMaxStamina
		if hardcoreChangeAnouncements == true then
			local message = tostring("Your current new Max Stamina Value is " .. (hardcore_CurrMaxStamina * 100))
			db.actor:give_game_news("Respawn Mod", message,"ui_inGame2_neutral_2_mask", 0, 20000)
		end
	end
	alife_storage_manager.get_state().respawn_mod_gepardas = respawn_mode
end

function on_tutor_gameover_respawn()
	-- Try and get any saved values on the save game of last sleep location
	local respawn_mod = alife_storage_manager.get_state().respawn_mod_gepardas
	
	currently_respawning = nil
	--Test fix for bleeding after respawning
	db.actor.bleeding = 1
	if respawn_mod  and respawn_mod.sleep_player_vector_x then
		local player_vector_x = respawn_mod.sleep_player_vector_x --_g.se_load_var("respawn_mode_gepardas", "sleep_player_vector", "sleep_player_vector")
		local player_vector_y = respawn_mod.sleep_player_vector_y
		local player_vector_z = respawn_mod.sleep_player_vector_z  
		local player_lvid = respawn_mod.sleep_player_lvid -- g.se_load_var("respawn_mode_gepardas", "sleep_player_lvid", "sleep_player_lvid")
		local player_gvid = respawn_mod.sleep_player_gvid --g.se_load_var("respawn_mode_gepardas", "sleep_player_gvid", "sleep_player_gvid")
		--alife_storage_manager.get_state().respawn_mod_gepardas = respawn_mod
		xr_effects.change_level_now(vector():set(player_vector_x, player_vector_y, player_vector_z), player_lvid, player_gvid, VEC_ZERO, true)
	end
	if db.actor:character_community() == "actor_stalker" then -- if loner >>
		xr_effects.change_level_now(vector():set(-246.0744, -24.8076, -136.0753), 14372, 372, VEC_ZERO, true) -- sidorovich's bunker
		
	elseif db.actor:character_community() == "actor_army" then -- if military >>
		xr_effects.change_level_now(vector():set(-123.26, -28.4, -379.96), 133511, 450, VEC_ZERO, true) -- southern checkpoint
		
	elseif db.actor:character_community() == "actor_bandit" then -- if bandit >>
		xr_effects.change_level_now(vector():set(20.72, 7.85, -42.93), 189149, 1515, VEC_ZERO, true) -- northern factory
		
	elseif db.actor:character_community() == "actor_csky" then -- if clear sky >>
		xr_effects.change_level_now(vector():set(-140.56, 1.5, -317.99), 75660, 136, VEC_ZERO, true) -- hidden base
		
	elseif db.actor:character_community() == "actor_dolg" then -- if duty >>
		xr_effects.change_level_now(vector():set(229.09, -5.449, 128.31), 59298, 1704, VEC_ZERO, true) -- duty headquarter
		
	elseif db.actor:character_community() == "actor_ecolog" then -- if ecologist >>
		xr_effects.change_level_now(vector():set(28.96, -10.05, -280.12), 78646, 2281, VEC_ZERO, true) -- sakharovs bunker
		
	elseif db.actor:character_community() == "actor_freedom" then -- if freedom >>
		xr_effects.change_level_now(vector():set(-18.02, -2.46, -31.74), 274912, 2092, VEC_ZERO, true) -- military base
		
	elseif db.actor:character_community() == "actor_killer" then -- if mercenary >>
		xr_effects.change_level_now(vector():set(-56.6, 8.92, 37.57), 96425, 2367, VEC_ZERO, true) -- sports center
		
	elseif db.actor:character_community() == "actor_monolith" then -- if monolith >>
		xr_effects.change_level_now(vector():set(-3.59, -3.50, 189.80), 98087, 3069, VEC_ZERO, true) -- cultural center
		
	elseif db.actor:character_community() == "actor_monolith" then -- if sin >>
		xr_effects.change_level_now(vector():set(-152.36056518555, 2.2933793067932, -26.791021347046), 5570, 2772, VEC_ZERO, true) -- red forest old mine
	
	elseif db.actor:character_community() == "actor_monolith" then -- if renegade >>
		xr_effects.change_level_now(vector():set(-179.78, 4.13, 417.23), 52100, 80, VEC_ZERO, true) -- tuzla outpost
		
	else -- if unisg/ other >>
		xr_effects.change_level_now(vector():set(136.32, 28.9, 240.395), 348892, 4920, VEC_ZERO, true) -- hideout in outskirts
	end
end

function do_nothing()
	local nothing = true
end